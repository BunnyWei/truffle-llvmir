/*
 * Copyright (c) 2012, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.truffle.llvm.runtime;

import java.io.*;

import com.oracle.truffle.api.*;
import com.oracle.truffle.api.dsl.*;
import com.oracle.truffle.api.frame.*;
import com.oracle.truffle.api.nodes.*;
import com.oracle.truffle.api.object.*;
import com.oracle.truffle.api.source.*;
import com.oracle.truffle.llvm.*;
import com.oracle.truffle.llvm.builtins.*;
import com.oracle.truffle.llvm.nodes.*;
import com.oracle.truffle.llvm.nodes.local.*;
import com.oracle.truffle.llvm.parser.*;

public final class LlvmContext extends ExecutionContext {
    private static final Layout LAYOUT = Layout.createLayout();

    private final PrintStream output;
    private final LlvmFunctionRegistry functionRegistry;
    private final Shape emptyShape;
    private final BufferedReader input;

    public LlvmContext(BufferedReader input, PrintStream output) {
        this.input = input;
        this.output = output;
        this.functionRegistry = new LlvmFunctionRegistry();
        installBuiltins();

        this.emptyShape = LAYOUT.createShape(new ObjectType());
    }

    @Override
    public String getLanguageShortName() {
        return "LLVM IR";
    }

    public BufferedReader getInput() {
        return input;
    }

    public PrintStream getOutput() {
        return output;
    }

    /**
     * Returns the registry of all functions that are currently defined.
     */
    public LlvmFunctionRegistry getFunctionRegistry() {
        return functionRegistry;
    }

    private void installBuiltins() {
        installBuiltin(LlvmPrintfBuiltinFactory.getInstance());

    }

    public void installBuiltin(NodeFactory<? extends LlvmBuiltinNode> factory) {
        /*
         * The builtin node factory is a class that is automatically generated by the Truffle DLlvm.
         * The signature returned by the factory reflects the signature of the @Specialization
         * methods in the builtin classes.
         */
        int argumentCount = factory.getExecutionSignature().size();
        LlvmExpressionNode[] argumentNodes = new LlvmExpressionNode[argumentCount];
        /*
         * Builtin functions are like normal functions, i.e., the arguments are passed in as an
         * Object[] array encapsulated in LlvmArguments. A LlvmReadArgumentNode extracts a parameter
         * from this array.
         */
        for (int i = 0; i < argumentCount; i++) {
            argumentNodes[i] = new LlvmReadArgumentNode(null, i);
        }
        /* Instantiate the builtin node. This node performs the actual functionality. */
        LlvmBuiltinNode builtinBodyNode = factory.createNode(argumentNodes, this);
        /* The name of the builtin function is specified via an annotation on the node class. */
        String name = lookupNodeInfo(builtinBodyNode.getClass()).shortName();
        /* Wrap the builtin in a RootNode. Truffle requires all AST to start with a RootNode. */
        LlvmRootNode rootNode = new LlvmRootNode(this, new FrameDescriptor(), builtinBodyNode, name);

        /* Register the builtin function in our function registry. */
        getFunctionRegistry().register(name, rootNode);
    }

    public static NodeInfo lookupNodeInfo(Class<?> clazz) {
        if (clazz == null) {
            return null;
        }
        NodeInfo info = clazz.getAnnotation(NodeInfo.class);
        if (info != null) {
            return info;
        } else {
            return lookupNodeInfo(clazz.getSuperclass());
        }
    }

    /**
     * and then execute the function named main. To use this method with instrumentation,
     * setASTNodeProber must have been already called. There is currently no guard to check if this
     * is the case. <br/>
     * Due to the experimental nature of the instrumentation framework, the parse that happens in
     * this method will remove any previouLlvmy added instrumentation.
     *
     * @param source The {@link Source} to execute.
     */
    public void executeMain(Source source) {
        LlvmParser.parseLlvm(this, source);
        LlvmFunction main = getFunctionRegistry().lookup("@main");
        /*
         * if (main.getCallTarget() == null) { throw new
         * LlvmException("No function main() defined in Llvm source file."); }
         */
        main.getCallTarget().call();
    }

    public DynamicObject createObject() {
        return LAYOUT.newInstance(emptyShape);
    }

    public static boolean isLlvmObject(Object value) {
        return LAYOUT.getType().isInstance(value);
    }

    public static DynamicObject castLlvmObject(Object value) {
        return LAYOUT.getType().cast(value);
    }
}
